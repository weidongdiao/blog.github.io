<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Javascript brief summary]]></title>
      <url>http://www.diaoweidong.com/2017/03/03/Javascript-brief-summary/</url>
      <content type="html"><![CDATA[<p>Brief summary of javascript knowledge<br><a id="more"></a><br><img src="https://i2.wp.com/constructs.stampede-design.com/wp-content/uploads/2017/01/javascriptlogo-2.jpg?resize=360%2C280" alt=""></p>
<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a><strong>Scope</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(function()&#123;</div><div class="line">var a = b = 5;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">console.log(b);</div></pre></td></tr></table></figure>
<p>Result will be  <code>5</code> . <code>a</code> is a local variable because it declared by <code>var</code>. <code>b</code> is a global variable.</p>
<p>If in strict mode, this code will alert mistake. It should change to below:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(function()&#123;</div><div class="line">&apos;use strict&apos;</div><div class="line">var a = widow, b = 5;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">console.log(b);</div></pre></td></tr></table></figure>
<h2 id="Create-“Native”"><a href="#Create-“Native”" class="headerlink" title="Create “Native”"></a><strong>Create “Native”</strong></h2><p>In the object <code>string</code> define a <code>repeatify</code> function. This function can receive an integer parameter, to identify the times of repeat of character strings. This function requires identifying the times of repeating of character strings. For example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.log(&apos;hello&apos;.repeatify(3));</div></pre></td></tr></table></figure>
<p>It should print out <code>hellohellohello</code>.</p>
<p>If we want to test if a function already exists, it can use following method:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String.prototype.repeatify = String.prototype.repeatify || function(times)</div></pre></td></tr></table></figure>
<h2 id="Variable-Hoisting"><a href="#Variable-Hoisting" class="headerlink" title="Variable Hoisting"></a><strong>Variable Hoisting</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">	console.log(a);</div><div class="line">	console.log(foo());</div><div class="line"></div><div class="line">	var a = 1;</div><div class="line">	function foo()&#123;</div><div class="line">		return 2;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">test();</div></pre></td></tr></table></figure>
<p>The result will be <code>undefined</code> and <code>2</code>. The reason is the variable and function have been hoisted to the top of the function body. And the above code can be seen as following:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">	var a;</div><div class="line">	function foo()&#123;</div><div class="line">		return 2;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	console.log(a);</div><div class="line">	console.log(foo());</div><div class="line"></div><div class="line">	a = 1;</div><div class="line">	&#125;</div><div class="line">test();</div></pre></td></tr></table></figure>
<h2 id="how-“this”-work-in-javascript"><a href="#how-“this”-work-in-javascript" class="headerlink" title=" how “this” work in javascript"></a><strong> how “this” work in javascript</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var fullname = &apos;John Doe&apos;;</div><div class="line">var obj = &#123;</div><div class="line">   fullname: &apos;Colin Ihrig&apos;,</div><div class="line">   prop: &#123;</div><div class="line">      fullname: &apos;Aurelio De Rosa&apos;,</div><div class="line">      getFullname: function() &#123;</div><div class="line">         return this.fullname;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">console.log(obj.prop.getFullname());</div><div class="line"></div><div class="line">var test = obj.prop.getFullname;</div><div class="line"></div><div class="line">console.log(test());</div></pre></td></tr></table></figure>
<p>The result will be <code>Aurelio De Rosa</code> and <code>John Doe</code>. The reason is that <code>this</code> is quoted by function and decided by how to call function, instead of how to define.</p>
<p>In the first result, <code>getFullname()</code> is the function of variable <code>obj.prop</code>. But in the second result, <code>getFullname()</code> is the variable of <code>test</code>, it should be quoted by global variable <code>window</code>. So that return <code>window</code> ‘s <code>fullname</code>.</p>
<h2 id="Closures"><a href="#Closures" class="headerlink" title=" Closures"></a><strong> Closures</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var nodes = document.getElementsByTagName(&apos;button&apos;);</div><div class="line">for (var i = 0; i &lt; nodes.length; i++) &#123;</div><div class="line">   nodes[i].addEventListener(&apos;click&apos;, (function(i) &#123;</div><div class="line">      return function() &#123;</div><div class="line">         console.log(&apos;You clicked element #&apos; + i);</div><div class="line">      &#125;</div><div class="line">   &#125;)(i));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>OR:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function handlerWrapper(i) &#123;</div><div class="line">   return function() &#123;</div><div class="line">      console.log(&apos;You clicked element #&apos; + i);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var nodes = document.getElementsByTagName(&apos;button&apos;);</div><div class="line">for (var i = 0; i &lt; nodes.length; i++) &#123;</div><div class="line">   nodes[i].addEventListener(&apos;click&apos;, handlerWrapper(i));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Data-Type"><a href="#Data-Type" class="headerlink" title=" Data Type"></a><strong> Data Type</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">console.log(typeof null);</div><div class="line">console.log(typeof &#123;&#125;);</div><div class="line">console.log(typeof []);</div><div class="line">console.log(typeof undefined);</div></pre></td></tr></table></figure>
<p>It will return:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">object</div><div class="line">object</div><div class="line">object</div><div class="line">undefined</div></pre></td></tr></table></figure></p>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title=" Event Loop"></a><strong> Event Loop</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function printing() &#123;</div><div class="line">   console.log(1);</div><div class="line">   setTimeout(function() &#123; console.log(2); &#125;, 1000);</div><div class="line">   setTimeout(function() &#123; console.log(3); &#125;, 0);</div><div class="line">   console.log(4);</div><div class="line">&#125;</div><div class="line">printing();</div></pre></td></tr></table></figure>
<p>It will print out:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">4</div><div class="line">3</div><div class="line">2</div></pre></td></tr></table></figure></p>
<h2 id="Algorithm-isPrime"><a href="#Algorithm-isPrime" class="headerlink" title=" Algorithm(isPrime()?)"></a><strong> Algorithm(isPrime()?)</strong></h2><p>Given an algorithm that return <code>true</code> when an integer is prime number and return <code>false</code> when an integer is not prime number.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function isPrime(number) &#123;</div><div class="line">   // If your browser doesn&apos;t support the method Number.isInteger of ECMAScript 6,</div><div class="line">   // you can implement your own pretty easily</div><div class="line">   if (typeof number !== &apos;number&apos; || !Number.isInteger(number)) &#123;</div><div class="line">      // Alternatively you can throw an error.</div><div class="line">      return false;</div><div class="line">   &#125;</div><div class="line">   if (number &lt; 2) &#123;</div><div class="line">      return false;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   if (number === 2) &#123;</div><div class="line">      return true;</div><div class="line">   &#125; else if (number % 2 === 0) &#123;</div><div class="line">      return false;</div><div class="line">   &#125;</div><div class="line">   var squareRoot = Math.sqrt(number);</div><div class="line">   for(var i = 3; i &lt;= squareRoot; i += 2) &#123;</div><div class="line">      if (number % i === 0) &#123;</div><div class="line">         return false;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is LazyMan]]></title>
      <url>http://www.diaoweidong.com/2017/01/30/What-is-Lazyman/</url>
      <content type="html"><![CDATA[<p>Knowing LazyMan from an interview in WeChat, so I want to record some knowledge of LazyMan.<br><a id="more"></a></p>
<blockquote>
<p>Quote: <a href="">https://github.com/easonhan007/lazyman</a></p>
</blockquote>
<h2 id="Introduction-of-LazyMan"><a href="#Introduction-of-LazyMan" class="headerlink" title="Introduction of LazyMan"></a>Introduction of LazyMan</h2><blockquote>
<ol>
<li><p>Lazyman is a simple web automation test framework using selenium-webdriver, watir-webdriver, page-object and rspec.</p>
</li>
<li><p>Page Object: Page object abstract  each test page as a Page class and encapsulate the test objects(page element) of the page and basic test steps(logic action). In order to increase readability, reusability and consistency of code.</p>
</li>
<li><p>Rspect: Rspect is one of test plug-in in Ruby.</p>
</li>
</ol>
</blockquote>
<h2 id="How-to-achieve-LazyMan"><a href="#How-to-achieve-LazyMan" class="headerlink" title="How to achieve LazyMan"></a>How to achieve LazyMan</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">function _LazyMan(_name) &#123;</div><div class="line">    var _this = this;</div><div class="line">    _this.tasks = [];</div><div class="line">    _this.tasks.push(function() &#123;</div><div class="line">        console.log(&apos;Hi! This is &apos; + _name + &apos;!&apos;);</div><div class="line">        // this is window，so it needs to cache this</div><div class="line">        _this.next();</div><div class="line">    &#125;);</div><div class="line">    setTimeout(function() &#123;</div><div class="line">        _this.next();</div><div class="line">    &#125;, 0);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// &quot;this&quot; in push function and &quot;this&quot; in the setTimeout function all point to global scope，so it needs to cache present this point</div><div class="line">_LazyMan.prototype.next = function() &#123;</div><div class="line">    var _fn = this.tasks.shift();</div><div class="line">    _fn &amp;&amp; _fn();</div><div class="line">&#125;</div><div class="line">_LazyMan.prototype.sleep = function(_time) &#123;</div><div class="line">    var _this = this;</div><div class="line">    _this.tasks.push(function() &#123;</div><div class="line">        setTimeout(function() &#123;</div><div class="line">            console.log(&apos;Wake up after &apos; + _time);</div><div class="line">            _this.next();</div><div class="line">        &#125;, _time);</div><div class="line">    &#125;);</div><div class="line">    return _this;</div><div class="line">&#125;</div><div class="line">_LazyMan.prototype.sleepFirst = function(_time) &#123;</div><div class="line">    var _this = this;</div><div class="line">    _this.tasks.unshift(function() &#123;</div><div class="line">        setTimeout(function() &#123;</div><div class="line">            console.log(&apos;Wake up after &apos; + _time);</div><div class="line">            _this.next();</div><div class="line">        &#125;, _time);</div><div class="line">    &#125;);</div><div class="line">    return _this;</div><div class="line">&#125;</div><div class="line">_LazyMan.prototype.eat = function(_eat) &#123;</div><div class="line">    var _this = this;</div><div class="line">    _this.tasks.push(function() &#123;</div><div class="line">        console.log(&apos;Eat &apos; + _eat);</div><div class="line">        _this.next();</div><div class="line">    &#125;);</div><div class="line">    return _this;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Object Encapsulation</div><div class="line">var LazyMan = function(_name) &#123;</div><div class="line">    return new _LazyMan(_name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[First Blog]]></title>
      <url>http://www.diaoweidong.com/2017/01/14/First-Blog/</url>
      <content type="html"><![CDATA[<p>第一篇博客，My first blog<br><a id="more"></a><br>这个博客主要想用来分享在web开发学习过程中个人学到的一些知识和技术，作为一个技术备忘录，随时分享一些自己在学习过程中的心得。</p>
<p>欢迎批评指正，技术分享。</p>
<p>My blog is used to share some knowledge and technique when I study in the field of web development.</p>
<p>Please fell free to contact me if you have any good suggestions or share more knowledge with me. Thanks!</p>
]]></content>
    </entry>
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Javascript brief summary]]></title>
      <url>http://www.diaoweidong.com/2017/03/03/Javascript-brief-summary/</url>
      <content type="html"><![CDATA[<p>Brief summary of javascript knowledge<br><a id="more"></a><br><img src="/Users/weidongdiao/Documents/keep-calm-and-learn-javascript.jpg" alt=""></p>
<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a><strong>Scope</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(function()&#123;</div><div class="line">var a = b = 5;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">console.log(b);</div></pre></td></tr></table></figure>
<p>Result will be <figure class="highlight plain"><figcaption><span>```a``` is a local variable because it declared by ```var```. ```b``` is a global variable.</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">If in strict mode, this code will alert mistake. It should change to below:</div></pre></td></tr></table></figure></p>
<p>(function(){<br>‘use strict’<br>var a = widow, b = 5;<br>})();</p>
<p>console.log(b);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">## **Create &quot;Native&quot;**</div><div class="line">In the object ```string``` define a ```repeatify```function. This function can receive an integer parameter, to identify the times of repeat of character strings. This function requires identifying the times of repeating of character strings. For example:</div></pre></td></tr></table></figure></p>
<p>console.log(‘hello’.repeatify(3));<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">It should print out ```hellohellohello```.</div><div class="line"></div><div class="line">If we want to test if a function already exists, it can use following method:</div></pre></td></tr></table></figure></p>
<p>String.prototype.repeatify = String.prototype.repeatify || function(times)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## **Variable Hoisting**</div></pre></td></tr></table></figure></p>
<p>function test(){<br>    console.log(a);<br>    console.log(foo());</p>
<pre><code>var a = 1;
function foo(){
    return 2;
}
</code></pre><p>}<br>test();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">The result will be ```undefined``` and ```2```. The reason is the variable and function have been hoisted to the top of the function body. And the above code can be seen as following:</div></pre></td></tr></table></figure></p>
<p>function test(){<br>    var a;<br>    function foo(){<br>        return 2;<br>    }</p>
<pre><code>console.log(a);
console.log(foo());

a = 1;
}
</code></pre><p>test();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## ** how &quot;this&quot; work in javascript**</div></pre></td></tr></table></figure></p>
<p>var fullname = ‘John Doe’;<br>var obj = {<br>   fullname: ‘Colin Ihrig’,<br>   prop: {<br>      fullname: ‘Aurelio De Rosa’,<br>      getFullname: function() {<br>         return this.fullname;<br>      }<br>   }<br>};</p>
<p>console.log(obj.prop.getFullname());</p>
<p>var test = obj.prop.getFullname;</p>
<p>console.log(test());<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">The result will be ```Aurelio De Rosa``` and ```John Doe```. The reason is that ```this``` is quoted by function and decided by how to call function, instead of how to define.</div><div class="line"></div><div class="line">In the first result, ```getFullname()``` is the function of variable```obj.prop```. But in the second result, ```getFullname()``` is the variable of ```test```, it should be quoted by global variable ```window```. So that return ```window```&apos;s ```fullname```.</div><div class="line"></div><div class="line">## ** Closures**</div></pre></td></tr></table></figure></p>
<p>var nodes = document.getElementsByTagName(‘button’);<br>for (var i = 0; i &lt; nodes.length; i++) {<br>   nodes[i].addEventListener(‘click’, (function(i) {<br>      return function() {<br>         console.log(‘You clicked element #’ + i);<br>      }<br>   })(i));<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">OR:</div></pre></td></tr></table></figure></p>
<p>function handlerWrapper(i) {<br>   return function() {<br>      console.log(‘You clicked element #’ + i);<br>   }<br>}</p>
<p>var nodes = document.getElementsByTagName(‘button’);<br>for (var i = 0; i &lt; nodes.length; i++) {<br>   nodes[i].addEventListener(‘click’, handlerWrapper(i));<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## ** Data Type**</div></pre></td></tr></table></figure></p>
<p>console.log(typeof null);<br>console.log(typeof {});<br>console.log(typeof []);<br>console.log(typeof undefined);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">It will return:</div></pre></td></tr></table></figure></p>
<p>object<br>object<br>object<br>undefined<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## ** Event Loop**</div></pre></td></tr></table></figure></p>
<p>function printing() {<br>   console.log(1);<br>   setTimeout(function() { console.log(2); }, 1000);<br>   setTimeout(function() { console.log(3); }, 0);<br>   console.log(4);<br>}<br>printing();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">It will print out:</div></pre></td></tr></table></figure></p>
<p>1<br>4<br>3<br>2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## ** Algorithm(isPrime()?)**</div><div class="line">Given an algorithm that return ```true``` when an integer is prime number and return ```false``` when an integer is not prime number.</div></pre></td></tr></table></figure></p>
<p>function isPrime(number) {<br>   // If your browser doesn’t support the method Number.isInteger of ECMAScript 6,<br>   // you can implement your own pretty easily<br>   if (typeof number !== ‘number’ || !Number.isInteger(number)) {<br>      // Alternatively you can throw an error.<br>      return false;<br>   }<br>   if (number &lt; 2) {<br>      return false;<br>   }</p>
<p>   if (number === 2) {<br>      return true;<br>   } else if (number % 2 === 0) {<br>      return false;<br>   }<br>   var squareRoot = Math.sqrt(number);<br>   for(var i = 3; i &lt;= squareRoot; i += 2) {<br>      if (number % i === 0) {<br>         return false;<br>      }<br>   }<br>   return true;<br>}<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[What is LazyMan]]></title>
      <url>http://www.diaoweidong.com/2017/01/30/What-is-Lazyman/</url>
      <content type="html"><![CDATA[<p>Knowing LazyMan from an interview in WeChat, so I want to record some knowledge of LazyMan.<br><a id="more"></a></p>
<blockquote>
<p>Quote: <a href="">https://github.com/easonhan007/lazyman</a></p>
</blockquote>
<h2 id="Introduction-of-LazyMan"><a href="#Introduction-of-LazyMan" class="headerlink" title="Introduction of LazyMan"></a>Introduction of LazyMan</h2><blockquote>
<ol>
<li><p>Lazyman is a simple web automation test framework using selenium-webdriver, watir-webdriver, page-object and rspec.</p>
</li>
<li><p>Page Object: Page object abstract  each test page as a Page class and encapsulate the test objects(page element) of the page and basic test steps(logic action). In order to increase readability, reusability and consistency of code.</p>
</li>
<li><p>Rspect: Rspect is one of test plug-in in Ruby.</p>
</li>
</ol>
</blockquote>
<h2 id="How-to-achieve-LazyMan"><a href="#How-to-achieve-LazyMan" class="headerlink" title="How to achieve LazyMan"></a>How to achieve LazyMan</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">function _LazyMan(_name) &#123;</div><div class="line">    var _this = this;</div><div class="line">    _this.tasks = [];</div><div class="line">    _this.tasks.push(function() &#123;</div><div class="line">        console.log(&apos;Hi! This is &apos; + _name + &apos;!&apos;);</div><div class="line">        // this is window，so it needs to cache this</div><div class="line">        _this.next();</div><div class="line">    &#125;);</div><div class="line">    setTimeout(function() &#123;</div><div class="line">        _this.next();</div><div class="line">    &#125;, 0);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// &quot;this&quot; in push function and &quot;this&quot; in the setTimeout function all point to global scope，so it needs to cache present this point</div><div class="line">_LazyMan.prototype.next = function() &#123;</div><div class="line">    var _fn = this.tasks.shift();</div><div class="line">    _fn &amp;&amp; _fn();</div><div class="line">&#125;</div><div class="line">_LazyMan.prototype.sleep = function(_time) &#123;</div><div class="line">    var _this = this;</div><div class="line">    _this.tasks.push(function() &#123;</div><div class="line">        setTimeout(function() &#123;</div><div class="line">            console.log(&apos;Wake up after &apos; + _time);</div><div class="line">            _this.next();</div><div class="line">        &#125;, _time);</div><div class="line">    &#125;);</div><div class="line">    return _this;</div><div class="line">&#125;</div><div class="line">_LazyMan.prototype.sleepFirst = function(_time) &#123;</div><div class="line">    var _this = this;</div><div class="line">    _this.tasks.unshift(function() &#123;</div><div class="line">        setTimeout(function() &#123;</div><div class="line">            console.log(&apos;Wake up after &apos; + _time);</div><div class="line">            _this.next();</div><div class="line">        &#125;, _time);</div><div class="line">    &#125;);</div><div class="line">    return _this;</div><div class="line">&#125;</div><div class="line">_LazyMan.prototype.eat = function(_eat) &#123;</div><div class="line">    var _this = this;</div><div class="line">    _this.tasks.push(function() &#123;</div><div class="line">        console.log(&apos;Eat &apos; + _eat);</div><div class="line">        _this.next();</div><div class="line">    &#125;);</div><div class="line">    return _this;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Object Encapsulation</div><div class="line">var LazyMan = function(_name) &#123;</div><div class="line">    return new _LazyMan(_name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[First Blog]]></title>
      <url>http://www.diaoweidong.com/2017/01/14/First-Blog/</url>
      <content type="html"><![CDATA[<p>第一篇博客，My first blog<br><a id="more"></a><br>这个博客主要想用来分享在web开发学习过程中个人学到的一些知识和技术，作为一个技术备忘录，随时分享一些自己在学习过程中的心得。</p>
<p>欢迎批评指正，技术分享。</p>
<p>My blog is used to share some knowledge and technique when I study in the field of web development.</p>
<p>Please fell free to contact me if you have any good suggestions or share more knowledge with me. Thanks!</p>
]]></content>
    </entry>
    
  
  
</search>
